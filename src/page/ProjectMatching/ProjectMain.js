import axios from "axios";
//import { da } from "date-fns/locale";
import { React, useState, useEffect } from "react";
import { useNavigate, Navigate } from "react-router-dom";
import { ScheduleModal, ScheduleDetailModal } from "../../Component/Modal";
import { SERVER_URL } from "../../utils/SRC";
import { fillScheduleStyleList, TimeList } from "../../Component/Schedule";

function ProjectMain() {
  const navigate = useNavigate();
  const tagList = [
    "JAVA",
    "Spring",
    "C++",
    "JavaScript",
    "C#",
    "C",
    "Python",
    "ÎÉ†ÎÉ†",
    "„ÖÅ„Ñ¥„Öá",
    "Ïö∏ÎûÑÎùº",
    "Ïñ∏Ïñ¥1",
    "Ïñ∏Ïñ¥2",
  ];
  const time = ["00Ïãú", "02Ïãú", "04Ïãú", "06Ïãú", "08Ïãú", "10Ïãú", "12Ïãú", "14Ïãú", "16Ïãú", "18Ïãú", "20Ïãú", "22Ïãú", "24Ïãú"];
  const day = ["Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†", "Ïùº"];
  let timeTable = []; // day:ÏöîÏùº , time : [0~24 Î¶¨Ïä§Ìä∏]
  //const [scheduleList, setScheduleList] = useState([]);
  let scheduleList = [];
  const [timeList, setTimeList] = useState([]);
  const [isTC, setIsTC] = useState(false);
  const [isTagChecked, setIsTagChecked] = useState([]);
  const [isTagFull, setIsTagFull] = useState(false);
  const [checkedTagList, setCheckedTagList] = useState([]);
  const [tmp, setTmp] = useState(false);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [showScheduleDetailModal, setShowScheduleDetailModal] = useState(false);
  const [projectList, setProjectList] = useState([]);
  //
  const [scheduleStyleList, setScheduleStyleList] = useState([[], [], [], [], [], [], []]);
  //let selectedSchedule = { startTime: "", endTime: "", week: "", id: 0 };
  const [selectedSchedule, setSelectedSchedule] = useState({ startTime: "", endTime: "", week: "", id: 0 });
  const [selectedWeek, setSelectedWeek] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");

  //


  let timetop = 0 - (1 / 12 * 100);
  let tmpSchedule = [
    { startTime: "13:48:00", endTime: "14:00:00", day: "Ïõî", id: 1 },
    { startTime: "18:00:00", endTime: "21:35:00", day: "Ïõî", id: 2 },
    { startTime: "10:00:00", endTime: "18:35:00", day: "Ïàò", id: 3 },
    { startTime: "08:00:00", endTime: "11:05:00", day: "ÌÜ†", id: 4 }
  ];

  const [height, setHeight] = useState("");
  const scheduleStyle = {
    color: "black",
    background: "teal",
    height: height,
    top: "10rem",
  };
  const timeStyle = (top) => {
    return (
      {
        position: "absolute",
        top: top,
        textAlign: "center",
        left: "50%",
        transform: "translateX(-50%)",
      }
    )
  }
  //

  useEffect(() => {
    loadSchedule();
    loadProject();
    makeTimeTalbe();
    let t = [];
    for (let i = 0; i < tagList.length; i++) {
      t.push(false);
    }
    console.log(t);
    setIsTagChecked(t);
    console.log(isTagChecked);
  }, []);

  function loadProject() {
    axios.get(SERVER_URL + "/matching-service/api/v1/matchings/page?",
      {
        params: {
          page: 1
        }
      })
      .then((res) => {
        let tmpProjectList = [];
        console.log(res);
        res.data.data.boards.map((item) => {
          tmpProjectList.push(item);
        })
        tmpProjectList.map((item) => {
          console.log(item);
        })
        setProjectList([...tmpProjectList]);
      })
      .catch((err) => {
        console.log(err.response);
      })
  }

  function makeTimeTalbe() {
    day.map((item) => {
      let tmpTimeT = { day: item, time: [] };
      for (let i = 0; i <= 24; i = i + 2) {
        tmpTimeT.time.push(i);
      }
      timeTable.push(tmpTimeT);
    })
  }
  function fillTimeTable(time, day) {

  }
  async function deleteSchedule(id) {
    await axios.delete(SERVER_URL + "/user-service/api/v1/timetables/" + id)
      .then((res) => {
        console.log(res);
        //setScheduleStyleList([[], [], [], [], [], [], []]);
        loadSchedule();
      })
      .catch((err) => {
        console.log(err.response);
      })
  }
  async function loadSchedule() {
    await axios.get(SERVER_URL + "/user-service/api/v1/timetables")
      .then((res) => {
        console.log(res);
        let tmpScheduleList = [];
        res.data.data.timeTables.map((item) => {
          tmpScheduleList.push(item);
        })
        //setScheduleList([...tmpScheduleList]);
        scheduleList = tmpScheduleList;
        console.log("Ïä§ÏºÄÏ•¥ÏûÖÎãàÎã§~");
        console.log(tmpScheduleList);
        fillScheduleStyleList(scheduleStyleList, setScheduleStyleList, scheduleList);
      })
      .catch((err) => {
        console.log(err.response);
      })
  }
  async function postSchedule() {
    //if (checkSchedule()) return;
    let data = {
      week: selectedWeek,
      startTime: startTime,
      endTime: endTime
    }
    console.log(data);
    await axios.post(SERVER_URL + "/user-service/api/v1/timetables", data)
      .then((res) => {
        console.log(res);
        loadSchedule();
      })
      .catch((err) => {
        console.log(err.response);
      })
  }

  let tmpDetail =
    "Ï†àÎåÄ Ïû†ÏàòÌÉÄÏßÄ ÏïäÍ≥† ÎÅùÍπåÏßÄ Ï±ÖÏûÑÍ∞ê ÏûàÍ≤å Ìï®Íªò ÏßÄÏÜçÌï¥ÎÇòÍ∞à ÌåÄÏõêÏùÑ Íµ¨Ìï©ÎãàÎã§. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à.  Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à. Ïû†Ïàò ÏÇ¨Ï†à.Ïû†Ïàò ÏÇ¨Ï†à.";
  const onTagButtonClickHandler = (e) => {
    if (e.target.value == "-1") return;
    if (checkedTagList.length >= 3 && isTagChecked[e.target.value] == false) {
      setIsTagFull(true);
      return;
    }
    let t = isTagChecked;
    e.target.checked = true;
    t[e.target.value] = !t[e.target.value];
    setIsTagChecked(t);
    let t_c = checkedTagList;
    if (isTagChecked[e.target.value] == true) {
      t_c.push(e.target.name);
      setCheckedTagList(t_c);
    } else if (isTagChecked[e.target.value] == false) {
      setCheckedTagList(t_c.filter((tagname) => tagname !== e.target.name));
      setIsTagFull(false);
    }
    console.log(checkedTagList);
    setTmp(!tmp);
  };
  const keyPressHandler = (e) => {
    if (e.key === "Enter") {
      navigate("/blog/search");
    }
  };

  return (
    <div class="bg-white w-full font-test">
      {showScheduleModal ?
        (<ScheduleModal
          setShowScheduleModal={setShowScheduleModal}
          isMain={true}
          loadSchedule={loadSchedule}
          postSchedule={postSchedule}
          setSelectedWeek={setSelectedWeek}
          setStartTime={setStartTime}
          setEndTime={setEndTime}
        />)
        :
        (null)}
      {showScheduleDetailModal ? (
        <ScheduleDetailModal
          selectedSchedule={selectedSchedule}
          setShowScheduleDetailModal={setShowScheduleDetailModal}
          deleteSchedule={deleteSchedule}
        />
      ) : (null)}
      <div class="relative w-[60rem] inset-x-1/2 transform -translate-x-1/2">
        <div class="relative my-10">
          <div class="flex ">
            <div class="h-12 w-1/2">
              <div class="flex gap-2 content-center bg-gray-50 rounded-lg border border-slate-300 px-2 py-2 ">
                <div class="self-center ml-2">üîç</div>
                <select class="text-gray-400 text-lg appearance-none focus:outline-none bg-transparent">
                  <option
                    value="Ï†úÎ™©"
                    class="hover:bg-gray-100 dark:hover:bg-gray-600 text-center"
                  >
                    Ï†úÎ™©
                  </option>
                </select>
                <div class="h-6 my-auto border-l border-gray-300 z-10"></div>
                {tagList.map((tag, index) => {
                  if (isTagChecked[index]) {
                    return (
                      <div class="flex rounded-lg items-center font-ltest text-bluepurple text-sm bg-develbg px-2">
                        <div>{tag}</div>
                        <button
                          class="ml-2"
                          name={tag}
                          value={index}
                          onClick={onTagButtonClickHandler}
                        >
                          x
                        </button>
                      </div>
                    );
                  }
                })}
                <input
                  class="bg-gray-50 grow focus:outline-0 text-gray-500 ml-2"
                  type="text"
                  onKeyPress={keyPressHandler}
                  placeholder={checkedTagList.length == 0 ? "ÏõêÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏Î•º Í≤ÄÏÉâÌï¥ Î≥¥ÏÑ∏Ïöî!" : null}
                />
              </div>
            </div>
            <div class="flex content-center gap-4 text-lg font-ltest mt-1 h-10 ml-3">
              <div class="self-center">#</div>
              {tagList.slice(0, 3).map((tag, index) => {
                return (
                  <button
                    class={
                      isTagChecked[index] == true
                        ? "border text-base rounded-lg w-[6rem] bg-develbg border-bluepurple text-bluepurple"
                        : "border text-md rounded-lg w-[6rem]"
                    }
                    name={tag}
                    value={index}
                    onClick={onTagButtonClickHandler}
                  >
                    {tag}
                  </button>
                );
              })}
              <select
                class="border text-md rounded-lg w-[6rem]"
                onChange={onTagButtonClickHandler}
              >
                <option
                  value="-1"
                  class="hover:bg-gray-100 dark:hover:bg-gray-600 text-center"
                >
                  ÏÑ†ÌÉù
                </option>
                {tagList.slice(8, tagList.length).map((tag, index) => {
                  return (
                    <option class="text-center" name={tag} value={index + 8}>
                      {tag}
                    </option>
                  );
                })}
              </select>
            </div>
            {isTagFull ? (
              <div class="absolute text-sm font-ltest ml-3 mt-2 text-bluepurple">
                ÌÉúÍ∑∏Îäî ÏµúÎåÄ 3Í∞úÍπåÏßÄ ÏÑ†ÌÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </div>
            ) : null}
          </div>
          <div class="mt-4 flex">
            <p>
              <input class="w-3 h-3" type="checkbox" id="timetable" />{" "}
              <label class="ml-2" for="timetable">
                ÏãúÍ∞ÑÌëú Í∏∞Î∞ò
              </label>
            </p>
          </div>
          <div class="mt-4 text-2xl font-btest">
            Ïú†ÏßÑÎãò, Ïù¥Îü∞ ÌîÑÎ°úÏ†ùÌä∏Îäî Ïñ¥Îñ†Ïã†Í∞ÄÏöî?
          </div>

          <div class="mt-4 border rounded-lg">
            {projectList.map((item) => {
              if (item.image != null) {
                return (
                  <div
                    className="Writing"
                    class="flex border-b bg-white h-54 px-10 pt-3 gap-5 text-left w-[59.5rem]"
                  >
                    <div class="w-[47rem]">
                      <div class="text-sm text-gray-400 flex items-center font-ltest">
                        {item.status == "ACTIVE" ? (
                          <>
                            <div class="w-fit px-2 bg-green-300 text-black">Î™®ÏßëÏ§ë</div>
                          </>
                        )
                          :
                          (<div class="px-2 bg-red-300 text-black">Î™®ÏßëÏôÑÎ£å</div>)
                        }
                      </div>
                      <button
                        onClick={() => navigate("/pm/detail/" + item.id)}
                        class="mt-1 py-1 text-black text-xl">
                        {item.title}
                      </button>
                      <div class="font-ltest min-h-[45px]">{item.content}</div>
                      <div class="flex gap-2">
                        {item.tagInfos.map((tags) => {
                          return (
                            <div class="px-1 font-ltest text-sm w-fit mt-4 bg-gray-200 rounded-none border">
                              {tags.name}
                            </div>
                          )
                        })}
                      </div>
                      <div class="text-sm font-ltest text-gray-400">{item.startDate + "~" + item.endDate}</div>
                    </div>
                    <div class="w-grow">
                      <div class="w-32 h-32 mb-2">
                        <img
                          src={"data:image/" + item.imgType + ";base64," + item.image}
                          class="w-full z-full z-40 min-h-[32px] max-h-[32px]"
                        />
                      </div>
                      <div class="w-32 grid grid-rows-2 text-sm ">
                        <div>{"Ï∞∏Ïó¨ Ïù∏Ïõê: " + item.recruited + "/" + item.recruit}</div>
                      </div>
                    </div>
                  </div>
                )
              }
              else {
                return (
                  <div
                    className="Writing"
                    class="flex border-b bg-white h-54 px-10 pt-3 gap-5 text-left w-[59.5rem]"
                  >
                    <div class="w-[47rem]">
                      <div class="text-sm text-gray-400 flex items-center font-ltest">
                        {item.status == "ACTIVE" ? (
                          <>
                            <div class="w-fit px-2 bg-green-300 text-black">Î™®ÏßëÏ§ë</div>
                          </>
                        )
                          :
                          (<div class="px-2 bg-red-300 text-black">Î™®ÏßëÏôÑÎ£å</div>)
                        }
                      </div>
                      <button
                        onClick={() => navigate("/pm/detail/" + item.id)}
                        class="mt-1 py-1 text-black text-xl">
                        {item.title}
                      </button>
                      <div class="font-ltest min-h-[45px]">{item.content}</div>
                      <div class="flex gap-2">
                        {item.tagInfos.map((tags) => {
                          return (
                            <div class="px-1 font-ltest text-sm w-fit mt-4 bg-gray-200 rounded-none border">
                              {tags.name}
                            </div>
                          )
                        })}
                      </div>
                      <div class="text-sm font-ltest text-gray-400">{item.startDate + "~" + item.endDate}</div>
                    </div>
                    <div class="w-grow">
                      <div class="w-32 grid grid-rows-2 text-sm ">
                        <div>{"Ï∞∏Ïó¨ Ïù∏Ïõê: " + item.recruited + "/" + item.recruit}</div>
                      </div>
                    </div>
                  </div>
                )
              }
            })}
            <div
              className="Writing"
              class="flex border-b bg-white h-54 px-10 py-5 gap-5"
            >
              <div class="w-[47rem]">
                <div class="text-sm flex gap-4 text-gray-400 font-ltest">
                  <div class="px-2 bg-green-300 text-black">Î™®ÏßëÏ§ë</div>
                  <h>ÌåÄÏû•Î™Ö</h>
                </div>
                <button class="mt-1 py-1 text-black text-xl"
                  onClick={() => navigate("/pm/detail")}>
                  Í∞úÎ∞úÏûê ÎèÑÏõÄ Ïõπ ÏÑúÎπÑÏä§Î•º Ìï®Íªò ÎßåÎì§Ïñ¥ÎÇòÍ∞à ÌåÄÏõêÏùÑ Íµ¨Ìï©ÎãàÎã§.
                </button>
                <div class="font-ltest">{tmpDetail}</div>
                <div class="flex gap-2">
                  <div class="px-1 font-ltest text-sm w-fit mt-4 bg-gray-200 rounded-none border">
                    #Spring
                  </div>
                  <div class="px-1 font-ltest text-sm w-fit mt-4 bg-gray-200 rounded-none border">
                    #JavaScript
                  </div>
                </div>
              </div>
              <div class="w-grow">
                <div class="bg-gray-300 w-32 h-28 mb-2">ÏÇ¨ÏßÑ</div>
                <div class="w-32 grid grid-rows-2 text-sm ">
                  <div>ÎßàÍ∞ê ÎÇ†Ïßú: 5Ïõî 12Ïùº</div>
                  <div>Ï∞∏Ïó¨ Ïù∏Ïõê: 2/4</div>
                </div>
              </div>
            </div>
            <div
              className="Writing"
              class="flex border-b bg-white h-54 px-10 py-5 gap-5"
            >
              <div class="w-[47rem]">
                <div class="text-sm flex gap-4 text-gray-400 font-ltest">
                  <div class="px-2 bg-green-300 text-black">Î™®ÏßëÏ§ë</div>
                  <h>ÌåÄÏû•Î™Ö</h>
                </div>
                <button class="mt-1 py-1 text-black text-xl">
                  Í∞úÎ∞úÏûê ÎèÑÏõÄ Ïõπ ÏÑúÎπÑÏä§Î•º Ìï®Íªò ÎßåÎì§Ïñ¥ÎÇòÍ∞à ÌåÄÏõêÏùÑ Íµ¨Ìï©ÎãàÎã§.
                </button>
                <div class="font-ltest">{tmpDetail}</div>
                <div class="flex gap-2">
                  <div class="px-1 font-ltest text-sm w-fit mt-4 bg-gray-200 rounded-none border">
                    #Spring
                  </div>
                  <div class="px-1 font-ltest text-sm w-fit mt-4 bg-gray-200 rounded-none border">
                    #JavaScript
                  </div>
                </div>
              </div>
              <div class="w-grow">
                <div class="bg-gray-300 w-32 h-28 mb-2">ÏÇ¨ÏßÑ</div>
                <div class="w-32 grid grid-rows-2 text-sm ">
                  <div>ÎßàÍ∞ê ÎÇ†Ïßú: 5Ïõî 12Ïùº</div>
                  <div>Ï∞∏Ïó¨ Ïù∏Ïõê: 2/4</div>
                </div>
              </div>
            </div>
          </div>

          <div class="mt-10 text-2xl font-btest">ÎÇòÏùò ÏãúÍ∞ÑÌëú</div>
          <div class="flex ">
            <div class="basis-3/4">
              <div class="mr-10 my-4 border border-gray-400 h-[50rem] flex flex-col justify-between p-2 text-center">
                <div class="w-full h-fit grid grid-cols-8 pb-5 font-ltest">
                  <div>ÏãúÍ∞Ñ</div>
                  {day.map((item) => {
                    return (
                      <div>{item}</div>
                    )
                  })}
                </div>
                <div class="w-full h-full grid grid-cols-8 gap-1">
                  <TimeList />
                  {day.map((week, index) => {
                    return (
                      <div class="h-full relative">
                        <div>
                          {scheduleStyleList[index].map((item) => {
                            return (
                              <button
                                style={item.style}
                                onClick={() => {
                                  setSelectedSchedule({ startTime: item.startTime, endTime: item.endTime, week: week, id: item.id });
                                  setShowScheduleDetailModal(true);
                                }}
                              >
                              </button>
                            )
                          })}
                        </div>
                      </div>
                    );
                  })}
                </div>
                <button
                  class="self-end text-base font-ltest"
                  onClick={() => {
                    setShowScheduleModal(true);
                  }}
                >
                  {">"}ÏùºÏ†ï Ï∂îÍ∞ÄÌïòÍ∏∞
                </button>
              </div>
            </div>
            <div class="basis-1/4">
              <div class="grid grid-rows-2 h-full">
                <button
                  onClick={() => navigate("/pm/add")}
                  class="text-gray-600 rounded-lg border border-slate-300 w-full my-4 py-2">
                  ÏÉà ÌîÑÎ°úÏ†ùÌä∏ Î™®ÏßëÌïòÍ∏∞
                </button>
                <button
                  onClick={() => navigate("/pm/mylist")}
                  class=" text-gray-600 rounded-lg border border-slate-300 w-full my-4 py-2">
                  ÎÇ¥ ÌîÑÎ°úÏ†ùÌä∏ Î≥¥Í∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProjectMain;
